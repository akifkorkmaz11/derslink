// Class Service - Sƒ±nƒ±f sistemi i√ßin servisler
class ClassService {
    constructor() {
        this.supabase = window.supabase;
    }

    // Mevcut sƒ±nƒ±flarƒ± getir
    async getAvailableClasses(programType = 'LGS', scheduleType = null) {
        try {
            console.log('üîç Mevcut sƒ±nƒ±flar aranƒ±yor:', { programType, scheduleType });
            
            let query = this.supabase
                .from('classes')
                .select(`
                    *,
                    class_schedules (
                        day_of_week,
                        start_time,
                        end_time,
                        subject,
                        teacher_name
                    )
                `)
                .eq('program_type', programType)
                .eq('status', 'active');

            if (scheduleType) {
                query = query.eq('schedule_type', scheduleType);
            }

            const { data, error } = await query;

            if (error) {
                console.error('‚ùå Sƒ±nƒ±f listesi alƒ±namadƒ±:', error);
                throw error;
            }

            console.log('‚úÖ Sƒ±nƒ±f listesi alƒ±ndƒ±:', data);
            return { success: true, classes: data };
        } catch (error) {
            console.error('‚ùå Sƒ±nƒ±f listesi hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    // Sƒ±nƒ±fa kayƒ±t ol
    async enrollToClass(userId, classId) {
        try {
            console.log('üìù Sƒ±nƒ±fa kayƒ±t i≈ülemi ba≈ülatƒ±lƒ±yor:', { userId, classId });

            // √ñnce sƒ±nƒ±fƒ±n kapasitesini kontrol et
            const { data: classData, error: classError } = await this.supabase
                .from('classes')
                .select('max_capacity, current_enrollment')
                .eq('id', classId)
                .single();

            if (classError) {
                console.error('‚ùå Sƒ±nƒ±f bilgisi alƒ±namadƒ±:', classError);
                throw classError;
            }

            if (classData.current_enrollment >= classData.max_capacity) {
                throw new Error('Bu sƒ±nƒ±f dolu. Ba≈üka bir sƒ±nƒ±f se√ßin.');
            }

            // Kullanƒ±cƒ±nƒ±n zaten bu sƒ±nƒ±fa kayƒ±tlƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol et
            const { data: existingEnrollment, error: checkError } = await this.supabase
                .from('class_enrollments')
                .select('*')
                .eq('user_id', userId)
                .eq('class_id', classId)
                .eq('status', 'active')
                .single();

            if (existingEnrollment) {
                throw new Error('Bu sƒ±nƒ±fa zaten kayƒ±tlƒ±sƒ±nƒ±z.');
            }

            // Sƒ±nƒ±fa kayƒ±t ol
            const { data, error } = await this.supabase
                .from('class_enrollments')
                .insert([{
                    user_id: userId,
                    class_id: classId,
                    status: 'active'
                }])
                .select();

            if (error) {
                console.error('‚ùå Sƒ±nƒ±fa kayƒ±t hatasƒ±:', error);
                throw error;
            }

            // Sƒ±nƒ±fƒ±n current_enrollment sayƒ±sƒ±nƒ± g√ºncelle
            const { error: updateEnrollmentError } = await this.supabase
                .from('classes')
                .update({ 
                    current_enrollment: this.supabase.rpc('update_class_enrollment_count', { class_id: classId })
                })
                .eq('id', classId);

            if (updateEnrollmentError) {
                console.error('‚ùå Sƒ±nƒ±f enrollment sayƒ±sƒ± g√ºncelleme hatasƒ±:', updateEnrollmentError);
                // Ana i≈ülem ba≈üarƒ±lƒ± olduƒüu i√ßin bu hatayƒ± g√∂rmezden gel
            }

            console.log('‚úÖ Sƒ±nƒ±fa ba≈üarƒ±yla kayƒ±t olundu:', data);
            return { success: true, enrollment: data[0] };
        } catch (error) {
            console.error('‚ùå Sƒ±nƒ±fa kayƒ±t hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    // Kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ±nƒ± getir
    async getUserClass(userId) {
        try {
            console.log('üîç Kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ± aranƒ±yor:', userId);

            const { data, error } = await this.supabase
                .from('class_enrollments')
                .select(`
                    *,
                    classes!inner (
                        *,
                        class_schedules (
                            day_of_week,
                            start_time,
                            end_time,
                            subject,
                            teacher_name,
                            status
                        )
                    )
                `)
                .eq('user_id', userId)
                .eq('status', 'active')
                .single();

            if (error) {
                if (error.code === 'PGRST116') {
                    // Kullanƒ±cƒ± hen√ºz sƒ±nƒ±fa kayƒ±tlƒ± deƒüil
                    console.log('‚ÑπÔ∏è Kullanƒ±cƒ± hen√ºz sƒ±nƒ±fa kayƒ±tlƒ± deƒüil');
                    return { success: true, class: null };
                }
                console.error('‚ùå Kullanƒ±cƒ± sƒ±nƒ±fƒ± alƒ±namadƒ±:', error);
                return { success: true, class: null }; // Hata durumunda da null d√∂nd√ºr
            }

            console.log('‚úÖ Kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ± alƒ±ndƒ±:', data);
            
            // Veri kontrol√º
            if (!data || !data.classes || !data.classes.class_schedules) {
                console.warn('‚ö†Ô∏è Sƒ±nƒ±f verisi eksik:', data);
                return { success: true, class: null };
            }
            
            return { success: true, class: data };
        } catch (error) {
            console.error('‚ùå Kullanƒ±cƒ± sƒ±nƒ±fƒ± hatasƒ±:', error);
            return { success: true, class: null }; // Hata durumunda da null d√∂nd√ºr
        }
    }

    // Sƒ±nƒ±ftan √ßƒ±k
    async leaveClass(userId, classId) {
        try {
            console.log('üö™ Sƒ±nƒ±ftan √ßƒ±kƒ±≈ü i≈ülemi ba≈ülatƒ±lƒ±yor:', { userId, classId });

            const { data, error } = await this.supabase
                .from('class_enrollments')
                .update({ status: 'dropped' })
                .eq('user_id', userId)
                .eq('class_id', classId)
                .eq('status', 'active')
                .select();

            if (error) {
                console.error('‚ùå Sƒ±nƒ±ftan √ßƒ±kƒ±≈ü hatasƒ±:', error);
                throw error;
            }

            // Sƒ±nƒ±fƒ±n current_enrollment sayƒ±sƒ±nƒ± g√ºncelle
            const { error: updateEnrollmentError } = await this.supabase
                .from('classes')
                .update({ 
                    current_enrollment: this.supabase.rpc('update_class_enrollment_count', { class_id: classId })
                })
                .eq('id', classId);

            if (updateEnrollmentError) {
                console.error('‚ùå Sƒ±nƒ±f enrollment sayƒ±sƒ± g√ºncelleme hatasƒ±:', updateEnrollmentError);
                // Ana i≈ülem ba≈üarƒ±lƒ± olduƒüu i√ßin bu hatayƒ± g√∂rmezden gel
            }

            console.log('‚úÖ Sƒ±nƒ±ftan ba≈üarƒ±yla √ßƒ±kƒ±ldƒ±:', data);
            return { success: true, result: data[0] };
        } catch (error) {
            console.error('‚ùå Sƒ±nƒ±ftan √ßƒ±kƒ±≈ü hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    // Sƒ±nƒ±f detaylarƒ±nƒ± getir
    async getClassDetails(classId) {
        try {
            console.log('üîç Sƒ±nƒ±f detaylarƒ± aranƒ±yor:', classId);

            const { data, error } = await this.supabase
                .from('classes')
                .select(`
                    *,
                    class_schedules (
                        day_of_week,
                        start_time,
                        end_time,
                        subject,
                        teacher_name,
                        status
                    ),
                    class_enrollments (
                        user_id,
                        enrollment_date,
                        status,
                        users (
                            name,
                            email
                        )
                    )
                `)
                .eq('id', classId)
                .single();

            if (error) {
                console.error('‚ùå Sƒ±nƒ±f detaylarƒ± alƒ±namadƒ±:', error);
                throw error;
            }

            console.log('‚úÖ Sƒ±nƒ±f detaylarƒ± alƒ±ndƒ±:', data);
            return { success: true, class: data };
        } catch (error) {
            console.error('‚ùå Sƒ±nƒ±f detaylarƒ± hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    // Bug√ºnk√º dersleri getir
    async getTodayClasses(userId) {
        try {
            console.log('üìÖ Bug√ºnk√º dersler aranƒ±yor:', userId);

            // √ñnce kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ±nƒ± al
            const userClassResult = await this.getUserClass(userId);
            if (!userClassResult.success || !userClassResult.class) {
                console.log('‚ÑπÔ∏è Kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ± bulunamadƒ±, bo≈ü liste d√∂nd√ºr√ºl√ºyor');
                return { success: true, classes: [] };
            }

            const classSchedules = userClassResult.class.classes.class_schedules || [];
            const today = new Date().toLocaleDateString('tr-TR', { weekday: 'long' });
            
            console.log('üìÖ Bug√ºn:', today);
            console.log('üìÖ Mevcut dersler:', classSchedules);
            
            // G√ºn ismi e≈üle≈ütirmesi i√ßin alternatif kontrol
            const todayClasses = classSchedules.filter(schedule => {
                // Veri kontrol√º
                if (!schedule || !schedule.day_of_week || !schedule.start_time) {
                    console.warn('‚ö†Ô∏è Ge√ßersiz ders verisi:', schedule);
                    return false;
                }
                
                const isToday = schedule.day_of_week === today;
                const isActive = schedule.status !== 'cancelled'; // Aktif olmayan dersleri filtrele
                console.log(`üìÖ Ders kontrol√º: ${schedule.day_of_week} === ${today} = ${isToday}, aktif = ${isActive}`);
                return isToday && isActive;
            });

            console.log('‚úÖ Bug√ºnk√º dersler alƒ±ndƒ±:', todayClasses);
            return { success: true, classes: todayClasses };
        } catch (error) {
            console.error('‚ùå Bug√ºnk√º dersler hatasƒ±:', error);
            return { success: true, classes: [] };
        }
    }

    // Haftalƒ±k programƒ± getir
    async getWeeklySchedule(userId) {
        try {
            console.log('üìÖ Haftalƒ±k program aranƒ±yor:', userId);

            // √ñnce kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ±nƒ± al
            const userClassResult = await this.getUserClass(userId);
            if (!userClassResult.success || !userClassResult.class) {
                console.log('‚ÑπÔ∏è Kullanƒ±cƒ±nƒ±n sƒ±nƒ±fƒ± bulunamadƒ±, bo≈ü program d√∂nd√ºr√ºl√ºyor');
                return { success: true, schedule: {} };
            }

            const classSchedules = userClassResult.class.classes.class_schedules || [];
            console.log('üìÖ T√ºm ders programƒ±:', classSchedules);
            
            // G√ºnlere g√∂re grupla
            const weeklySchedule = {};
            const days = ['Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cumartesi', 'Pazar'];
            
            days.forEach(day => {
                const dayClasses = classSchedules
                    .filter(schedule => {
                        // Veri kontrol√º
                        if (!schedule || !schedule.day_of_week || !schedule.start_time) {
                            return false;
                        }
                        return schedule.day_of_week === day && schedule.status !== 'cancelled';
                    })
                    .sort((a, b) => a.start_time.localeCompare(b.start_time));
                
                console.log(`üìÖ ${day} g√ºn√º dersleri:`, dayClasses);
                weeklySchedule[day] = dayClasses;
            });

            console.log('‚úÖ Haftalƒ±k program alƒ±ndƒ±:', weeklySchedule);
            return { success: true, schedule: weeklySchedule };
        } catch (error) {
            console.error('‚ùå Haftalƒ±k program hatasƒ±:', error);
            return { success: true, schedule: {} };
        }
    }
}

// Global olarak export et
window.ClassService = ClassService;
